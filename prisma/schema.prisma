generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int               @id @default(autoincrement())
  firebase_uid      String            @unique
  mail              String            @unique
  businessPhones    String[]
  displayName       String?
  givenName         String?
  jobTitle          String?
  mobilePhone       String?
  officeLocation    String?
  preferredLanguage String?
  surname           String?
  role              Role              @default(STUDENT)
  created_at        DateTime          @default(now())
  Admin             Admin?
  Feedback          Feedback[]
  MentorProfile     MentorProfile?
  Notifications     Notification[]
  ProfessorProfile  ProfessorProfile?
  StudentProfile    StudentProfile?
}

model StudentProfile {
  student_id   Int           @id @default(autoincrement())
  user_id      Int           @unique
  name         String
  bio          String?
  skills       String[]
  experience   String?
  branch       String
  year         Int
  rollno       String
  applications Application[]
  meetings     Meeting[]
  User         User          @relation(fields: [user_id], references: [user_id])
  tasks        Task[]
  projects_in  Project[]     @relation("ProjectToStudentProfile")
}

  model MentorProfile {
    mentor_id   Int       @id @default(autoincrement())
    user_id     Int       @unique
    name        String
    bio         String?
    skills      String[]
    experience  String?
    branch      String
    year        Int
    User        User      @relation(fields: [user_id], references: [user_id])
    projects_in Project[]
  }

model ProfessorProfile {
  professor_id     Int       @id @default(autoincrement())
  user_id          Int       @unique
  name             String
  department       String
  research_field   String
  papers_published String[]
  meetings         Meeting[]
  User             User      @relation(fields: [user_id], references: [user_id])
  projects_under   Project[]
}

model Admin {
  admin_id    Int      @id @default(autoincrement())
  user_id     Int      @unique
  name        String
  bio         String?
  permissions String[]
  User        User     @relation(fields: [user_id], references: [user_id])
}

model Project {
  project_id   Int               @id @default(autoincrement())
  title        String
  description  String
  field        String
  tech_stack   String[]
  duration     String
  mentor_id    Int?
  professor_id Int?
  status       ProjectStatus     @default(OPEN)
  perks        String?
  created_at   DateTime          @default(now())
  applications Application[]
  meetings     Meeting[]
  mentor       MentorProfile?    @relation(fields: [mentor_id], references: [mentor_id])
  professor    ProfessorProfile? @relation(fields: [professor_id], references: [professor_id])
  tasks        Task[]
  students     StudentProfile[]  @relation("ProjectToStudentProfile")
}

model Application {
  application_id Int               @id @default(autoincrement())
  student_id     Int
  project_id     Int
  status         ApplicationStatus @default(PENDING)
  applied_at     DateTime          @default(now())
  project        Project           @relation(fields: [project_id], references: [project_id])
  student        StudentProfile    @relation(fields: [student_id], references: [student_id])
}

model Task {
  task_id     Int            @id @default(autoincrement())
  project_id  Int
  assigned_to Int?
  title       String
  description String
  status      TaskStatus @default(PENDING)
  created_at  DateTime   @default(now())
  deadline    Int?

  project    Project         @relation(fields: [project_id], references: [project_id])
  assignedTo StudentProfile? @relation(fields: [assigned_to], references: [student_id]) // Nullable field
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Notification {
  notification_id Int                @id @default(autoincrement())
  user_id         Int
  message         String
  status          NotificationStatus @default(UNREAD)
  created_at      DateTime           @default(now())
  User            User               @relation(fields: [user_id], references: [user_id])
}

model Meeting {
  meeting_id   Int              @id @default(autoincrement())
  project_id   Int
  professor_id Int
  student_id   Int
  meeting_link String
  created_at   DateTime         @default(now())
  professor    ProfessorProfile @relation(fields: [professor_id], references: [professor_id])
  project      Project          @relation(fields: [project_id], references: [project_id])
  student      StudentProfile   @relation(fields: [student_id], references: [student_id])
}

model Feedback {
  feedback_id Int      @id @default(autoincrement())
  message     String
  user_id     Int
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

enum Role {
  STUDENT
  MENTOR
  PROFESSOR
  ADMIN
}

enum ProjectStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  INTERVIEW_SCHEDULED
}



enum NotificationStatus {
  UNREAD
  READ
}
