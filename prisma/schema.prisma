generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       Role     @default(STUDENT)
  created_at DateTime @default(now())

  StudentProfile   StudentProfile?
  MentorProfile    MentorProfile?
  ProfessorProfile ProfessorProfile?
  Admin            Admin?
  Notifications    Notification[]
  Feedback         Feedback[]
  
}

enum Role {
  STUDENT
  MENTOR
  PROFESSOR
  ADMIN
}

model StudentProfile {
  student_id Int      @id @default(autoincrement())
  user_id    Int      @unique
  name       String
  bio        String?
  skills     String[]
  experience String?
  branch     String
  year       Int

  projects_in  Project[]
  applications Application[]
  meetings     Meeting[]
  tasks        Task[]

  User User @relation(fields: [user_id], references: [user_id])
}

model MentorProfile {
  mentor_id   Int       @id @default(autoincrement())
  user_id     Int       @unique
  name        String
  bio         String?
  skills      String[]
  experience  String?
  branch      String
  year        Int
  projects_in Project[]

  User User @relation(fields: [user_id], references: [user_id])
}

model ProfessorProfile {
  professor_id     Int       @id @default(autoincrement())
  user_id          Int       @unique
  name             String
  department       String
  research_field   String
  papers_published String[]
  projects_under   Project[]
  meetings         Meeting[]

  User User @relation(fields: [user_id], references: [user_id])
}

model Admin {
  admin_id    Int      @id @default(autoincrement())
  user_id     Int      @unique
  name        String
  bio         String?
  permissions String[]

  User User @relation(fields: [user_id], references: [user_id])
}

model Project {
  project_id   Int           @id @default(autoincrement())
  title        String
  description  String
  field        String
  tech_stack   String[]
  duration     String
  mentor_id    Int?
  professor_id Int?
  status       ProjectStatus @default(OPEN)
  perks        String?
  created_at   DateTime      @default(now())

  mentor       MentorProfile?    @relation(fields: [mentor_id], references: [mentor_id])
  professor    ProfessorProfile? @relation(fields: [professor_id], references: [professor_id])
  applications Application[]
  tasks        Task[]
  meetings     Meeting[]
  students     StudentProfile[]
}

enum ProjectStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model Application {
  application_id Int               @id @default(autoincrement())
  student_id     Int
  project_id     Int
  status         ApplicationStatus @default(PENDING)
  applied_at     DateTime          @default(now())

  student StudentProfile @relation(fields: [student_id], references: [student_id])
  project Project        @relation(fields: [project_id], references: [project_id])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  INTERVIEW_SCHEDULED
}

model Task {
  task_id     Int        @id @default(autoincrement())
  project_id  Int
  assigned_to Int
  title       String
  description String
  status      TaskStatus @default(PENDING)
  created_at  DateTime   @default(now())

  project    Project        @relation(fields: [project_id], references: [project_id])
  assignedTo StudentProfile @relation(fields: [assigned_to], references: [student_id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Notification {
  notification_id Int                @id @default(autoincrement())
  user_id         Int
  message         String
  status          NotificationStatus @default(UNREAD)
  created_at      DateTime           @default(now())

  User User @relation(fields: [user_id], references: [user_id])
}

enum NotificationStatus {
  UNREAD
  READ
}

model Meeting {
  meeting_id   Int      @id @default(autoincrement())
  project_id   Int
  professor_id Int
  student_id   Int
  meeting_link String
  created_at   DateTime @default(now())

  project   Project          @relation(fields: [project_id], references: [project_id])
  professor ProfessorProfile @relation(fields: [professor_id], references: [professor_id])
  student   StudentProfile   @relation(fields: [student_id], references: [student_id])
}

model Feedback {
  feedback_id Int      @id @default(autoincrement())
  message    String   @db.Text
  user_id    Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}